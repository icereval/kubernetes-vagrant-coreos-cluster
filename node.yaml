#cloud-config

write-files:
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && [ -n "$2" ] && \
        until curl -o /dev/null -sIf http://${1}:${2}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /etc/profile.d/etcdctl.sh
    permissions: 0644
    owner: core
    content: |
      # configure etcdctl to work with our remote etcd servers
      export ETCDCTL_PEERS=__ETCD_SERVERS__
  - path: /etc/profile.d/fleetctl.sh
    permissions: 0644
    owner: core
    content: |
      # configure fleetctl to work with our remote etcd servers
      export FLEETCTL_ENDPOINT=unix:///var/run/fleet.sock
      export FLEETCTL_EXPERIMENTAL_API=true
coreos:
  fleet:
    public-ip: $public_ipv4
    etcd-servers: __ETCD_SERVERS__
    metadata: role=node
  flannel:
    etcd_endpoints: __ETCD_SERVERS__
    interface: ens34 # eth1
    ip_masq: yes
  locksmith:
    endpoint: __ETCD_SERVERS__
  units:
    - name: flanneld.service
      command: start
    - name: fleet.service
      command: start
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://172.17.8.104:5000'
    - name: cadvisor.service
      command: start
      content: |
        [Unit]
        Description=cAdvisor Service
        After=docker.service
        Requires=docker.service

        [Service]
        Restart=always
        ExecStartPre=-/usr/bin/docker kill cadvisor
        ExecStartPre=-/usr/bin/docker rm -f cadvisor
        ExecStartPre=/usr/bin/docker pull google/cadvisor
        ExecStart=/usr/bin/docker run --name cadvisor -v=/var/run:/var/run:rw -v=/sys:/sys:ro -v=/var/lib/docker/:/var/lib/docker:ro -p=4194:4194 google/cadvisor --logtostderr --port=4194
        ExecStop=/usr/bin/docker stop -t 2 cadvisor
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__RELEASE__/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao 172.17.8.104 8080
        ExecStart=/opt/bin/kube-proxy \
          --etcd_servers=__ETCD_SERVERS__ \
          --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__RELEASE__/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        # wait for kubernetes master to be up and ready
        ExecStartPre=/opt/bin/wupiao 172.17.8.104 8080
        ExecStart=/opt/bin/kubelet \
          --address=0.0.0.0 \
          --port=10250 \
          --hostname_override=$public_ipv4 \
          --api_servers=172.17.8.104:8080 \
          --etcd_servers=__ETCD_SERVERS__ \
          --logtostderr=true
        Restart=always
        RestartSec=10
  update:
    group: __CHANNEL__
    reboot-strategy: off
